// A fast procedure for roughly estimating the k value for each combination of E-I locations //

/*apical trunk list: 0(41.50)-2(94.47)-14(122.82)-28(151.46)-30(179.70)-32(195.53)-40(201.79)-
	-44(227.96)-52(254.45)-60(262.17)-66(268.27)-72(283.71)-74(311.14)-78(343.59)*/

load_file("preload_files.hoc")

cvode.active(0)
dt=0.19
tstop=40

objectvar b, ampa, nmda, gabaa, gabab

objref stim_gaba, stim_glut

access soma
	distance()
	
	stim_gaba = new NetStim(0.5)
	stim_gaba.number=1
	stim_glut = new NetStim(0.5)
	stim_glut.number=1

proc step() {	local i
	fadvance()
		if(ngraph!=0) {
			for i=0, ngraph-1{
				g[i].plot(t)
				g[i].flush()
				doNotify()
			}
		}
}

proc run() { local j
	init()
	if(ngraph!=0) {
		for j=0, ngraph-1{
				g[j].begin()
		}
	}	
	while(t<tstop) {		
	step()}	
}

objref savdata, recv 
recv=new Vector()
recv.record(&soma.v(0))

pair = 121	// data pair, to be set
n = 3			// step number, to be set
double peak_point[n+1]
double EPSP[n+1], IPSP[n+1], SUM[n+1]
strdef source_path, target_path

proc main() { local i, j, count
	
	savdata = new File()
	savdata.wopen(target_path)
	ropen(source_path)
	
	count=0
	while(count<pair){ 

      I_loc = fscan()  E_loc = fscan()      
			gaba_gstart=fscan()	gaba_gend=fscan()
			ampa_gstart=fscan()	ampa_gend=fscan()
			
			gaba_gstep=(gaba_gend-gaba_gstart)/n
			ampa_gstep=(ampa_gend-ampa_gstart)/n
			
//print I_loc,  E_loc, gaba_gstart,	gaba_gend, ampa_gstart,	ampa_gend

 dend[I_loc] {
 
	print distance(0.5)
	I_dist=distance(0.5)
	
	gabaa= new GABAa()
	gabab= new GABAb()
	gabaa.loc(0.5)
	gabab.loc(0.5)
	setpointer gabaa.pre, stim_gaba.y	// assign presynaptic compartment
	setpointer gabab.pre, stim_gaba.y
	
 }

 dend[E_loc] {
 
	print distance(0.5)
	printf("\n")
	E_dist=distance(0.5)
    	
	ampa = new AMPA()
	nmda = new NMDA()
	ampa.loc(0.5)
	nmda.loc(0.5)
	setpointer ampa.pre, stim_glut.y	// assign presynaptic compartment
	setpointer nmda.pre, stim_glut.y		
		
 	if(!Block_NMDA_Flag){
 	 		nmda_ampa_ratio = 0.6/(1+E_dist/300)	// applied to Sratum Radiatum
 	}else{
 	 		nmda_ampa_ratio = 0.1*0.6/(1+E_dist/300)
 	}
// 	print "nmda_ampa_ratio = ", nmda_ampa_ratio		

 }	
	
	for j=0, n{
	
// EPSP record	//
	stim_gaba.start=1000
	stim_glut.start=10		
			ampa.gmax	= ampa_gstart+ampa_gstep*j
			nmda.gmax = ampa.gmax*nmda_ampa_ratio
			run()	
			EPSP[j]=find_peak(recv)-Vrest	
			peak_point[j]=flag
		
// IPSP record	//	
	stim_gaba.start=10
	stim_glut.start=1000			
    	gabaa.gmax=	gaba_gstart+gaba_gstep*j
      gabab.gmax=gabaa.gmax*gabab_gabaa_ratio                   
    	run()	
    	IPSP[j]= recv.x(peak_point[j])-Vrest	                                                    
    	
// SUM record	//		
  stim_gaba.start=10
	stim_glut.start=10	
    	run()	
    	SUM[j]= recv.x(peak_point[j])-Vrest	                                                    
//    savdata.printf("%.4f\t%.4f\t%.4f\n",EPSP[j],IPSP[j],SUM[j]) 
  }                                                           


// calculate k-value	//

	Nu=0
	De=0
	for i=0, n{
			Nu=Nu-(EPSP[i]+IPSP[i]-SUM[i])*EPSP[i]*IPSP[i]
			De=De+EPSP[i]*EPSP[i]*IPSP[i]*IPSP[i]
	}	
	
	k=Nu/De
	savdata.printf("%.2f\t%.2f\t%.4f\n", I_dist, E_dist, k) 
//	printf("%.2f\t%.2f\tk = %.4f\n\n", I_dist, E_dist, k)
	count=count+1  	
}
ropen()    		                                       
savdata.close()                                             
print "Done!\n"                     

}


// Result Plot //

/*
b = new VBox()
b.intercept(1)

addgraph("soma.v(0)", -75, -55)
//addgraph("dend[40].v(0)", -75, -55)
//addgraph("dend[2].v(0)", -75, -55)

b.intercept(0)
b.map()
morph_plot()
*/

proc Normal(){

		sprint(source_path, "%s", "D:/DATA/Normal_source.dat")
		sprint(target_path, "%s", "D:/DATA/Normal_target.dat")
		main()
		
}		
	
proc Block_Ka(){

		sprint(source_path, "%s", "D:/DATA/block/Block_Ka_source.dat")
		sprint(target_path, "%s", "D:/DATA/block/Block_Ka_target.dat")
    gka 	= 0.005*0.1 		                                       
    gka_dist = 	gka	  	              
    gka_prox =  gka	
    main()
    
    gka 	= 0.005 		                                       
    gka_dist = 	gka	  	              
    gka_prox =  gka	
    
}

proc Block_Ih(){

		sprint(source_path, "%s", "D:/DATA/block/Block_Ih_source.dat")
		sprint(target_path, "%s", "D:/DATA/block/Block_Ih_target.dat")
    ghd = 2e-5*0.1				
    gh_soma	=	ghd
    gh_end	=	10*ghd
    main()
    
    ghd = 2e-5				
    gh_soma	=	ghd
    gh_end	=	10*ghd
}

proc Block_Na(){

		sprint(source_path, "%s", "D:/DATA/block/Block_Na_source.dat")
		sprint(target_path, "%s", "D:/DATA/block/Block_Na_target.dat")
   	gna = 0.03*0.1
	  main()
    
    gna = 0.03
    
}

proc Block_Kd(){

		sprint(source_path, "%s", "D:/DATA/block/Block_Kd_source.dat")
		sprint(target_path, "%s", "D:/DATA/block/Block_Kd_target.dat")
    gkdr = 0.006*0.1  
    main()
    
    gk = 0.006 
}

proc Block_NMDA(){

		sprint(source_path, "%s", "D:/DATA/block/Block_NMDA_source.dat")
		sprint(target_path, "%s", "D:/DATA/block/Block_NMDA_target.dat")
    Block_NMDA_Flag = 1		
    main()
    
    Block_NMDA_Flag = 0	
}

proc Block_GABAb(){

		sprint(source_path, "%s", "D:/DATA/block/Block_GABAb_source.dat")
		sprint(target_path, "%s", "D:/DATA/block/Block_GABAb_target.dat")
    gabab_gabaa_ratio = 0 
    main()
    
    gabab_gabaa_ratio = 0.6
}

proc Block_All(){

		sprint(source_path, "%s", "D:/DATA/block/Block_All_source.dat")
		sprint(target_path, "%s", "D:/DATA/block/Block_All_target.dat")
		
		gna = 0.03*0.1
    
    gkd = 0.006*0.1 
    
    gka 	= 0.005*0.1 		                                       
    gka_dist = 	gka	  	              
    gka_prox =  gka	
    
    ghd = 2e-5*0.1				
    gh_soma	=	ghd
    gh_end	=	10*ghd
    
    Block_NMDA_Flag = 1	
    
    gabab_gabaa_ratio = 0 

    main() 
}

Normal()

/*
Block_Ka()
Block_Ih()
Block_Na()
Block_Kd()
Block_NMDA()
Block_GABAb()
Block_All()
*/

