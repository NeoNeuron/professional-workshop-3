// E-I integration with multiple Es and Is getting involved //

/*apical trunk list: 0(41.50)-2(94.47)-14(122.82)-28(151.46)-30(179.70)-32(195.53)-40(201.79)-
	-44(227.96)-52(254.45)-60(262.17)-66(268.27)-72(283.71)-74(311.14)-78(343.59)*/

load_file("pre_load_files.hoc")

cvode.active(0)
dt=0.1
tstop=40

ni = 5		//number of Is 
ne = 20		//number of Es
trial = 20	//number of trials
seed = 7

objref ampa[ne], nmda[ne], stim_glut[ne], b
objref gabaa[ni], gabab[ni], stim_gaba[ni] 
double k[ni][ne], I_loc[ni], E_loc[ne]
double EPSP[ne], IPSP[ni] 
strdef source_path, target_path 

access soma
	distance()
	
for i=0, ni-1{	
	stim_gaba[i] = new NetStim(0.5)
	stim_gaba[i].number=1
}

for j=0, ne-1{	
	stim_glut[j] = new NetStim(0.5)
	stim_glut[j].number=1
}	

proc step() {	local i
	fadvance()
		if(ngraph!=0) {
			for i=0, ngraph-1{
				g[i].plot(t)
				g[i].flush()
				doNotify()
			}
		}
}

proc run() { local j
	init()
	if(ngraph!=0) {
		for j=0, ngraph-1{
				g[j].begin()
		}
	}	
	while(t<tstop) {		
	step()}	
}

objref savdata, recv 
recv=new Vector()
recv.record(&soma.v(0))
objref r_gaba, r_ampa

gabaa_gstart = 0.0002	//0.0001
gabaa_gend = 0.004	//0.004
ampa_gstart =0.00003	//0.0001
ampa_gend = 0.0003	//0.001

proc main() { local i, j
	
	savdata = new File()
	savdata.wopen(target_path)
	
	ropen(source_path)
	for i=0, ni-1{ 	I_loc[i] = fscan() }
	for j=0, ne-1{ 	E_loc[j] = fscan() }
	for i=0, ni-1{ 		
		for j=0, ne-1{ 		
			k[i][j] = fscan()	
		}
	}	
	ropen() 	
	
 	r_gaba = new Random(seed)       r_ampa = new Random(seed+5)
	r_gaba.uniform(gabaa_gstart, gabaa_gend) 		r_ampa.uniform(ampa_gstart, ampa_gend) 	
	
for r=0, trial-1{

	gabaa_gm = r_gaba.repick()	
	ampa_gm  = r_ampa.repick()
	print "gabaa_gm ", gabaa_gm, "ampa_gm ", ampa_gm 
			
	for i=0, ni-1{ 		
		
	  dend[I_loc[i]] {
			 				
		
		I_dist=distance(0.5)
		print "I_dist	", I_dist
		
		gabaa[i]= new GABAa()
		gabab[i]= new GABAb()
		gabaa[i].loc(0.5)
		gabab[i].loc(0.5)
		setpointer gabaa[i].pre, stim_gaba[i].y	// assign presynaptic compartment
		setpointer gabab[i].pre, stim_gaba[i].y
		gabaa[i].gmax= gabaa_gm // 0.0003
  		gabab[i].gmax= gabaa[i].gmax*gabab_gabaa_ratio
	  }	
	}
	
	for j=0, ne-1{ 		
		
	  dend[E_loc[j]] { 
	  
		E_dist=distance(0.5)
		print "E_dist	", E_dist 
	    	
		ampa[j] = new AMPA()
		nmda[j] = new NMDA()
		ampa[j].loc(0.5)
		nmda[j].loc(0.5)
		setpointer ampa[j].pre, stim_glut[j].y	// assign presynaptic compartment
		setpointer nmda[j].pre, stim_glut[j].y			
		
	 	if(!Block_NMDA_Flag){
	 	 		nmda_ampa_ratio = 0.6/(1+E_dist/300)
	 	}else{
	 	 		nmda_ampa_ratio = 0.1*0.6/(1+E_dist/300)
	 	}
	 	
	 	ampa[j].gmax	= ampa_gm //0.0001
		nmda[j].gmax = ampa[j].gmax*nmda_ampa_ratio
		
 	  }
	}
	
	

// EPSP record //
 	EPSPAS=0

	for i=0, ni-1{	      
		stim_gaba[i].start=1000
	}
	for j=0, ne-1{
		stim_glut[j].start=10
	}
		run()	
		EPSPS = find_peak(recv)-Vrest
		peak_point = flag
			
	for j=0, ne-1{
		stim_glut[j].start=1000
	}
	for j=0, ne-1{
		stim_glut[j].start=10
		run()	
		EPSP[j] = recv.x(peak_point)-Vrest
		stim_glut[j].start=1000
		EPSPAS=EPSPAS+EPSP[j]
	}
	
	for j=0, ne-1{
		stim_glut[j].start=1000
	}

// IPSP record	//  	
 	IPSPAS=0 	
	for i=0, ni-1{	      
		stim_gaba[i].start = 10
		run()	
		IPSP[i] = recv.x(peak_point)-Vrest	
		stim_gaba[i].start = 1000	 
		IPSPAS=IPSPAS+IPSP[i] 	
	}   
	  
	for i=0, ni-1{	      
		stim_gaba[i].start=10
	}
		run()	
		IPSPS = recv.x(peak_point)-Vrest
		
// SUM record	//

	for j=0, ne-1{
		stim_glut[j].start=10
	}
    		run()	
    		SUM = recv.x(peak_point)-Vrest	   
    		
//  Prediction  //    		                                             
  SC = 0
  for i=0, ni-1{
  	for j=0, ne-1{    		                                                 
		SC = SC+k[i][j]*IPSP[i]*EPSP[j]
	}
  }	
  savdata.printf("%.6f\t%.6f\t%.6f\t%.6f\t%.6f\t", EPSPAS, EPSPS, IPSPAS, IPSPS, SC)
  savdata.printf("%.6f\t%.6f\t%.6f\n", EPSPAS+IPSPAS+SC, EPSPS+IPSPS+SC, SUM)	

}
 		                                       
savdata.close()                                             
print "Done!\n"                     

}


// Result Plot //

b = new HBox()
b.intercept(1)

addgraph("soma.v(0)", -75, -55)
//addgraph("dend[prox].v(0)", -75, -55)
//addgraph("dend[dist].v(0)", -75, -55)

b.intercept(0)
b.map()
//morph_plot()


proc Normal(){
		
		sprint(source_path, "%s", "D:/DATA/source.dat")
		sprint(target_path, "%s", "D:/DATA/target.dat")
		main()

		
}

Normal()



	

